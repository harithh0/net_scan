"""
- Scapy can also be used to mislead attackers
- This script used to protect against scan.py
- Anyone connecting to a differnet port other than the ones in safe_ports, will be listed in blocked
    - If a blocked IP is going to access a safe_port, the script will send a RST packet, to trick the user into thinking it is closed
- It will also make them believe that specific ports are opened listed in 'honey_ports' by sending them SYN ACK messages (instead of defualt RST)
#NOTE: In some cases, the system the script is running on might also send a response to the requestor along with HoneyScan, which can lead to race conditions, so
    the best way is to use on a system running in-line like a firewall or IPS, which will allow the system to drop packets generated by the system for ports listed in
    'honey_ports' and listed in 'ports' for IP address in the blocked list
"""


from scapy.all import *
ip = "10.0.0.113"
safe_ports = [22,80]
honey_ports = [8080,8443]

blocked_ips = []


def analyzePackets(passed_packet):


    # if the packet is meant for one of our honey ports
    if (passed_packet[IP].dport in honey_ports):
        # send fake SYN ACK
        """
        - relecting the request with a fake SYN ACK response
        """
        response_packet = IP(src=passed_packet[IP].dst, dst=passed_packet[IP].src)/\
        TCP(sport=passed_packet[TCP].dport, dport=passed_packet[TCP].sport, ack=passed_packet[TCP].seq+1)

        send(response_packet, verbose=0)
        print(passed_packet)

# creates Berkeley Packet Filter (BPF) string - a search filter for packets
# tells scapy to 'only capture TCP packets where the dest. IP addr is <ip> 
# removes other types of network traffic passing through
f = "dst host "+ip+" and tcp"

# scapy function that captures packets in real time -- only captures matching packets if filter passed
# everytime it sniffs a packet it will send it to our function
# basically: sniff TCP packets going to <ip> and call our function for each one
sniff(filter=f,prn=analyzePackets)